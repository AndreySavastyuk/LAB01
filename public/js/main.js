// main.js - –û—Å–Ω–æ–≤–Ω–æ–π JavaScript –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã LAB01

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ä–µ–π
let dictionaries = {};
let requestsData = [];

document.addEventListener('DOMContentLoaded', function() {
    console.log('LAB01 - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...');
    
    // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initializeAPI()
        .then(() => {
            initializeButtons();
            initializeForms();
            initializeNotifications();
            loadRecentRequests();
            initializeStatistics();
            console.log('LAB01 - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö', 'error');
        });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π
async function initializeAPI() {
    try {
        showMessage('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...', 'info');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏
        const response = await fetch('/api/dictionaries');
        if (response.ok) {
            dictionaries = await response.json();
            console.log('–°–ª–æ–≤–∞—Ä–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', dictionaries);
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä–µ–π
            populateSelects();
        } else {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞—Ä–∏, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ');
            // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ fallback
            dictionaries = {
                controlTypes: [
                    { id: 1, code: '–£–ó–ö', name: '–£–ó–ö', full_name: '–£–ª—å—Ç—Ä–∞–∑–≤—É–∫–æ–≤–æ–π –∫–æ–Ω—Ç—Ä–æ–ª—å' },
                    { id: 2, code: '–¶–î', name: '–¶–î', full_name: '–¶–≤–µ—Ç–Ω–∞—è –¥–µ—Ñ–µ–∫—Ç–æ—Å–∫–æ–ø–∏—è' },
                    { id: 3, code: '–†–ö', name: '–†–ö', full_name: '–†–∞–¥–∏–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å' },
                    { id: 4, code: '–¢–û', name: '–¢–û', full_name: '–¢–µ—Ä–º–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞' },
                    { id: 5, code: '–í–ò–ö', name: '–í–ò–ö', full_name: '–í–∏–∑—É–∞–ª—å–Ω–æ-–∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å' }
                ],
                stations: [
                    { id: 1, name: '–†—É–ø–ø—É—Ä' },
                    { id: 2, name: '–ê–∫–∫—É—é' },
                    { id: 3, name: '–ù–æ–≤–æ–≤–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è' },
                    { id: 4, name: '–ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è' }
                ]
            };
            populateSelects();
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API:', error);
        throw error;
    }
}

// –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ–≤ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä–µ–π
function populateSelects() {
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è
    const controlTypeSelect = document.querySelector('select');
    if (controlTypeSelect && dictionaries.controlTypes) {
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π
        const firstOption = controlTypeSelect.querySelector('option');
        controlTypeSelect.innerHTML = '';
        controlTypeSelect.appendChild(firstOption);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        dictionaries.controlTypes.forEach(type => {
            const option = document.createElement('option');
            option.value = type.id;
            option.textContent = `${type.code} - ${type.full_name || type.name}`;
            controlTypeSelect.appendChild(option);
        });
    }
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–µ–ª–µ–∫—Ç —Å—Ç–∞–Ω—Ü–∏–π
    const selects = document.querySelectorAll('select');
    const stationSelect = selects[1]; // –í—Ç–æ—Ä–æ–π —Å–µ–ª–µ–∫—Ç - —Å—Ç–∞–Ω—Ü–∏–∏
    if (stationSelect && dictionaries.stations) {
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π
        const firstOption = stationSelect.querySelector('option');
        stationSelect.innerHTML = '';
        stationSelect.appendChild(firstOption);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        dictionaries.stations.forEach(station => {
            const option = document.createElement('option');
            option.value = station.id;
            option.textContent = station.name;
            stationSelect.appendChild(option);
        });
    }
    
    console.log('–°–µ–ª–µ–∫—Ç—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ API');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
function findButtonsByText(text) {
    const buttons = document.querySelectorAll('button');
    return Array.from(buttons).filter(button => 
        button.textContent.trim().includes(text)
    );
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
function initializeButtons() {
    // –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞"
    const newRequestButtons = findButtonsByText('–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞');
    newRequestButtons.forEach(button => {
        button.addEventListener('click', showNewRequestForm);
        button.style.cursor = 'pointer';
    });
    
    // –ö–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å"
    const openButtons = findButtonsByText('–û—Ç–∫—Ä—ã—Ç—å');
    openButtons.forEach(button => {
        button.addEventListener('click', function() {
            const row = button.closest('tr');
            const requestNumber = row?.cells[0]?.textContent?.trim();
            openRequest(requestNumber);
        });
        button.style.cursor = 'pointer';
    });
    
    // –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"
    const createButtons = findButtonsByText('–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É');
    createButtons.forEach(button => {
        button.addEventListener('click', handleCreateRequest);
        button.style.cursor = 'pointer';
    });
    
    // –ö–Ω–æ–ø–∫–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫"
    const saveButtons = findButtonsByText('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫');
    saveButtons.forEach(button => {
        button.addEventListener('click', handleSaveDraft);
        button.style.cursor = 'pointer';
    });
    
    // –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
    const cancelButtons = findButtonsByText('–û—Ç–º–µ–Ω–∞');
    cancelButtons.forEach(button => {
        button.addEventListener('click', handleCancel);
        button.style.cursor = 'pointer';
    });
    
    // –ö–Ω–æ–ø–∫–∏ –≤ —à–∞–ø–∫–µ (SAP UI5, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
    const headerButtons = document.querySelectorAll('.fd-shellbar button');
    headerButtons.forEach(button => {
        button.addEventListener('click', function() {
            const text = button.textContent.trim();
            if (text.includes('SAP UI5')) {
                window.location.href = '/index-sap.html';
            } else if (text.includes('üîî')) {
                showNotifications();
            }
        });
        button.style.cursor = 'pointer';
    });
    
    console.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∫–Ω–æ–ø–æ–∫: ${newRequestButtons.length + openButtons.length + createButtons.length + saveButtons.length + cancelButtons.length}`);
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
function showNewRequestForm() {
    const formSection = document.querySelector('section:last-child');
    if (formSection) {
        formSection.scrollIntoView({ behavior: 'smooth' });
        // –û—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
        const inputs = formSection.querySelectorAll('input, select');
        inputs.forEach(input => {
            if (input.type === 'text') {
                input.value = '';
            } else if (input.tagName === 'SELECT') {
                input.selectedIndex = 0;
            }
        });
        // –§–æ–∫—É—Å –Ω–∞ –ø–µ—Ä–≤–æ–µ –ø–æ–ª–µ
        const firstInput = formSection.querySelector('input');
        if (firstInput) {
            firstInput.focus();
        }
    }
    showMessage('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏', 'info');
}

// –û—Ç–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É
function openRequest(requestNumber) {
    if (requestNumber) {
        showMessage(`–û—Ç–∫—Ä—ã—Ç–∏–µ –∑–∞—è–≤–∫–∏ ${requestNumber}...`, 'info');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ (–ù–ö-2024-0142 -> 142)
        const match = requestNumber.match(/–ù–ö-\d+-(\d+)/);
        const requestId = match ? match[1] : null;
        
        if (requestId) {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            // window.location.href = `/request/${requestId}`;
            
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            setTimeout(() => {
                showMessage(`–ó–∞—è–≤–∫–∞ ${requestNumber} –∑–∞–≥—Ä—É–∂–µ–Ω–∞`, 'success');
            }, 1000);
        } else {
            showMessage('–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏', 'error');
        }
    } else {
        showMessage('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏', 'error');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
function handleCreateRequest(event) {
    event.preventDefault();
    
    const form = event.target.closest('.fd-card');
    const formData = gatherFormData(form);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!formData.orderNumber || !formData.drawing || !formData.controlTypeId) {
        showMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', 'error');
        return;
    }
    
    showMessage('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏...', 'info');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
    const requestData = {
        date: new Date().toISOString().split('T')[0], // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        order_number: formData.orderNumber,
        drawing: formData.drawing,
        control_type_id: parseInt(formData.controlTypeId),
        station_id: formData.stationId ? parseInt(formData.stationId) : null,
        status_id: 1, // –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞
        priority: 2, // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        user: '–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
        // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        certificate: '',
        material: '',
        quantity: 1,
        operation: '–ö–æ–Ω—Ç—Ä–æ–ª—å',
        tech_requirements: '',
        surface_preparation: 0,
        english_required: 0,
        notes: `–°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: ${new Date().toLocaleString()}`
    };
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    createRequestAPI(requestData)
        .then(response => {
            if (response.id) {
                showMessage(`–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ! ID: ${response.id}`, 'success');
                clearForm(form);
                updateRequestsTable();
                
                // –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
                localStorage.removeItem('lab01_draft');
            } else {
                throw new Error(response.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            }
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:', error);
            showMessage('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏: ' + error.message, 'error');
        });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞
function handleSaveDraft(event) {
    event.preventDefault();
    
    const form = event.target.closest('.fd-card');
    const formData = gatherFormData(form);
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫
    localStorage.setItem('lab01_draft', JSON.stringify({
        ...formData,
        timestamp: new Date().toISOString()
    }));
    
    showMessage('–ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω', 'success');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
function handleCancel(event) {
    event.preventDefault();
    
    const form = event.target.closest('.fd-card');
    clearForm(form);
    
    // –£–¥–∞–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫
    localStorage.removeItem('lab01_draft');
    
    showMessage('–§–æ—Ä–º–∞ –æ—á–∏—â–µ–Ω–∞', 'info');
}

// –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
function clearForm(form) {
    const inputs = form.querySelectorAll('input');
    const selects = form.querySelectorAll('select');
    
    inputs.forEach(input => input.value = '');
    selects.forEach(select => select.selectedIndex = 0);
}

// –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
function gatherFormData(form) {
    const inputs = form.querySelectorAll('input');
    const selects = form.querySelectorAll('select');
    
    return {
        orderNumber: inputs[0]?.value || '',
        drawing: inputs[1]?.value || '',
        controlTypeId: selects[0]?.value || '',
        stationId: selects[1]?.value || ''
    };
}

// API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
async function createRequestAPI(requestData) {
    try {
        const response = await fetch('/api/requests', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(requestData)
        });
        
        const result = await response.json();
        
        if (!response.ok) {
            throw new Error(result.error || `HTTP error! status: ${response.status}`);
        }
        
        return result;
    } catch (error) {
        console.error('API Error:', error);
        throw error;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadRequestsAPI() {
    try {
        const response = await fetch('/api/requests?limit=10');
        if (response.ok) {
            const requests = await response.json();
            return requests;
        } else {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', error);
        return [];
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º
function initializeForms() {
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    const draft = localStorage.getItem('lab01_draft');
    if (draft) {
        try {
            const draftData = JSON.parse(draft);
            const form = document.querySelector('.fd-card');
            if (form && draftData.orderNumber) {
                // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–ª–∏—á–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
                showMessage('–ù–∞–π–¥–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —á–µ—Ä–Ω–æ–≤–∏–∫. –•–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?', 'info');
                
                setTimeout(() => {
                    if (confirm('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —á–µ—Ä–Ω–æ–≤–∏–∫–∞?')) {
                        restoreDraft(form, draftData);
                    }
                }, 2000);
            }
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞:', e);
        }
    }
    
    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª–µ–π
    const formInputs = document.querySelectorAll('.fd-card input, .fd-card select');
    formInputs.forEach(input => {
        input.addEventListener('change', () => {
            const form = input.closest('.fd-card');
            const formData = gatherFormData(form);
            if (formData.orderNumber || formData.drawing) {
                localStorage.setItem('lab01_draft', JSON.stringify({
                    ...formData,
                    timestamp: new Date().toISOString()
                }));
            }
        });
    });
}

// –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
function restoreDraft(form, draftData) {
    const inputs = form.querySelectorAll('input');
    const selects = form.querySelectorAll('select');
    
    inputs[0].value = draftData.orderNumber || '';
    inputs[1].value = draftData.drawing || '';
    
    if (draftData.controlTypeId) {
        selects[0].value = draftData.controlTypeId;
    }
    if (draftData.stationId) {
        selects[1].value = draftData.stationId;
    }
    
    showMessage('–ß–µ—Ä–Ω–æ–≤–∏–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'success');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function initializeNotifications() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if ('Notification' in window) {
        if (Notification.permission === 'default') {
            // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                if (confirm('–†–∞–∑—Ä–µ—à–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π?')) {
                    Notification.requestPermission();
                }
            }, 3000);
        }
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showNotifications() {
    const notifications = [
        { message: '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞', type: 'info', time: '2 –º–∏–Ω –Ω–∞–∑–∞–¥' },
        { message: '–ó–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', type: 'success', time: '5 –º–∏–Ω –Ω–∞–∑–∞–¥' },
        { message: '–í–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –¥–µ–¥–ª–∞–π–Ω', type: 'warning', time: '10 –º–∏–Ω –Ω–∞–∑–∞–¥' }
    ];
    
    let notificationHtml = '<div style="position: fixed; top: 60px; right: 20px; z-index: 1000; background: white; border-radius: 8px; box-shadow: 0 4px 16px rgba(0,0,0,0.15); padding: 16px; min-width: 300px;">';
    notificationHtml += '<h4 style="margin: 0 0 12px 0;">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>';
    
    notifications.forEach(notif => {
        const iconColor = notif.type === 'success' ? '#107e3e' : notif.type === 'warning' ? '#e9730c' : '#0a6ed1';
        notificationHtml += `
            <div style="padding: 8px; border-left: 3px solid ${iconColor}; margin-bottom: 8px; background: #f9f9f9;">
                <div style="font-weight: 500;">${notif.message}</div>
                <div style="font-size: 12px; color: #666; margin-top: 4px;">${notif.time}</div>
            </div>
        `;
    });
    
    notificationHtml += '<button onclick="this.parentElement.remove()" style="margin-top: 8px; padding: 4px 8px; background: #0a6ed1; color: white; border: none; border-radius: 4px; cursor: pointer;">–ó–∞–∫—Ä—ã—Ç—å</button>';
    notificationHtml += '</div>';
    
    // –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const existingNotifications = document.querySelector('[style*="position: fixed"][style*="top: 60px"]');
    if (existingNotifications) {
        existingNotifications.remove();
    }
    
    document.body.insertAdjacentHTML('beforeend', notificationHtml);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        const notification = document.querySelector('[style*="position: fixed"][style*="top: 60px"]');
        if (notification) {
            notification.remove();
        }
    }, 10000);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫
async function loadRecentRequests() {
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞—è–≤–æ–∫...');
    
    try {
        requestsData = await loadRequestsAPI();
        console.log('–ó–∞—è–≤–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', requestsData.length);
        updateRequestsTable();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', error);
        showMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫', 'warning');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞—è–≤–æ–∫
function updateRequestsTable() {
    const tbody = document.querySelector('.fd-table tbody');
    if (!tbody || !requestsData.length) {
        console.log('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã');
        return;
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const table = document.querySelector('.fd-table');
    if (table) {
        table.style.opacity = '0.7';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç—Ä–æ–∫–∏
            tbody.innerHTML = '';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞—è–≤–∫–∏
            requestsData.slice(0, 3).forEach(request => {
                const row = createRequestRow(request);
                tbody.appendChild(row);
            });
            
            // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç—å" –≤ –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
            const newOpenButtons = tbody.querySelectorAll('button');
            newOpenButtons.forEach(button => {
                if (button.textContent.includes('–û—Ç–∫—Ä—ã—Ç—å')) {
                    button.addEventListener('click', function() {
                        const row = button.closest('tr');
                        const requestNumber = row?.cells[0]?.textContent?.trim();
                        openRequest(requestNumber);
                    });
                    button.style.cursor = 'pointer';
                }
            });
            
            table.style.opacity = '1';
        }, 300);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∑–∞—è–≤–∫–∏
function createRequestRow(request) {
    const row = document.createElement('tr');
    row.className = 'fd-table__row';
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ù–ö-YYYY-NNNN
    const requestNumber = `–ù–ö-2024-${String(request.id).padStart(4, '0')}`;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    const statusInfo = getStatusInfo(request);
    const priorityInfo = getPriorityInfo(request);
    
    row.innerHTML = `
        <td class="fd-table__cell"><strong>${requestNumber}</strong></td>
        <td class="fd-table__cell">${request.order_number || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
        <td class="fd-table__cell">${request.drawing || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
        <td class="fd-table__cell">${request.control_type_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</td>
        <td class="fd-table__cell">
            <span class="fd-object-status fd-object-status--${statusInfo.class}">
                <span class="fd-object-status__icon">${statusInfo.icon}</span>
                <span>${statusInfo.name}</span>
            </span>
        </td>
        <td class="fd-table__cell">
            <span class="fd-object-status fd-object-status--${priorityInfo.class}">
                <span class="fd-object-status__icon">‚óè</span>
                <span>${priorityInfo.name}</span>
            </span>
        </td>
        <td class="fd-table__cell">
            <button class="fd-button fd-button--transparent">–û—Ç–∫—Ä—ã—Ç—å</button>
        </td>
    `;
    
    return row;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ
function getStatusInfo(request) {
    if (request.status_name) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        return {
            name: request.status_name,
            class: request.status_color === 'green' ? 'positive' : 
                   request.status_color === 'red' ? 'negative' :
                   request.status_color === 'yellow' ? 'critical' : 'informative',
            icon: request.status_icon || '‚óè'
        };
    }
    
    // Fallback –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
    const statusMap = {
        1: { name: '–ù–æ–≤–∞—è', class: 'informative', icon: 'üÜï' },
        2: { name: '–í —Ä–∞–±–æ—Ç–µ', class: 'critical', icon: 'üîÑ' },
        3: { name: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞', class: 'positive', icon: '‚úì' },
        4: { name: '–û—Ç–º–µ–Ω–µ–Ω–∞', class: 'negative', icon: '‚úó' }
    };
    
    return statusMap[request.status_id] || statusMap[1];
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
function getPriorityInfo(request) {
    const priorityMap = {
        1: { name: '–ù–∏–∑–∫–∏–π', class: 'positive' },
        2: { name: '–°—Ä–µ–¥–Ω–∏–π', class: 'critical' },
        3: { name: '–í—ã—Å–æ–∫–∏–π', class: 'negative' }
    };
    
    return priorityMap[request.priority] || priorityMap[2];
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function initializeStatistics() {
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–ª–∏—Ç–æ–∫
    const tiles = document.querySelectorAll('.fd-tile');
    tiles.forEach((tile, index) => {
        setTimeout(() => {
            tile.style.opacity = '0';
            tile.style.transform = 'translateY(20px)';
            tile.style.transition = 'all 0.3s ease';
            
            setTimeout(() => {
                tile.style.opacity = '1';
                tile.style.transform = 'translateY(0)';
            }, 100);
        }, index * 100);
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
        updateStatistics();
    }, 30000);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function updateStatistics() {
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å —Å–µ—Ä–≤–µ—Ä–∞
        const response = await fetch('/api/stats');
        if (response.ok) {
            const stats = await response.json();
            updateStatisticsTiles(stats);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∏—Ç–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStatisticsTiles(stats) {
    const tiles = document.querySelectorAll('.fd-tile');
    
    if (stats && tiles.length >= 4) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –ø–ª–∏—Ç–∫–∞—Ö
        const kpiElements = document.querySelectorAll('.fd-numeric-content__kpi');
        
        if (kpiElements.length >= 4) {
            kpiElements[0].textContent = stats.new || '0'; // –ù–æ–≤—ã–µ
            kpiElements[1].textContent = stats.in_progress || '0'; // –í —Ä–∞–±–æ—Ç–µ
            kpiElements[2].textContent = stats.completed || '0'; // –ó–∞–≤–µ—Ä—à–µ–Ω–æ
            kpiElements[3].textContent = stats.efficiency || '94'; // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        }
    }
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
function showMessage(message, type = 'info') {
    const colors = {
        success: '#107e3e',
        error: '#bb0000', 
        warning: '#e9730c',
        info: '#0a6ed1'
    };
    
    const messageDiv = document.createElement('div');
    messageDiv.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1001;
        background: ${colors[type]};
        color: white;
        padding: 12px 16px;
        border-radius: 4px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        font-size: 14px;
        max-width: 300px;
        word-wrap: break-word;
        animation: slideIn 0.3s ease;
    `;
    
    messageDiv.textContent = message;
    document.body.appendChild(messageDiv);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        messageDiv.style.animation = 'slideOut 0.3s ease';
        setTimeout(() => {
            if (messageDiv.parentNode) {
                messageDiv.remove();
            }
        }, 300);
    }, 5000);
}

// –î–æ–±–∞–≤–ª—è–µ–º CSS –∞–Ω–∏–º–∞—Ü–∏–∏
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    @keyframes slideOut {
        from { transform: translateX(0); opacity: 1; }
        to { transform: translateX(100%); opacity: 0; }
    }
    
    .fd-button:hover {
        transform: translateY(-1px);
        transition: transform 0.2s ease;
    }
    
    .fd-tile:hover {
        transform: translateY(-2px);
        transition: transform 0.2s ease;
        box-shadow: 0 4px 16px rgba(0,0,0,0.15);
    }
    
    .loading {
        opacity: 0.7;
        pointer-events: none;
    }
`;
document.head.appendChild(style); 