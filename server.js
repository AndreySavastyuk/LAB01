// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config();

const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const multer = require('multer');

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const NotificationService = require('./notifications');

const app = express();
const PORT = process.env.PORT || 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        const uploadDir = './uploads';
        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir);
        }
        cb(null, uploadDir);
    },
    filename: function (req, file, cb) {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        cb(null, uniqueSuffix + '-' + file.originalname);
    }
});
const upload = multer({ storage: storage });

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));
app.use('/uploads', express.static('uploads'));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î
const DB_FILE = './ndt_requests_v2.db';
const isNewDb = !fs.existsSync(DB_FILE);

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
const db = new sqlite3.Database(DB_FILE);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É–∂–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
let notificationService;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const notificationConfig = {
    appUrl: process.env.APP_URL || 'http://localhost:3000',
    email: {
        enabled: process.env.EMAIL_ENABLED === 'true',
        host: process.env.EMAIL_HOST,
        port: parseInt(process.env.EMAIL_PORT || '587'),
        secure: process.env.EMAIL_SECURE === 'true',
        user: process.env.EMAIL_USER,
        password: process.env.EMAIL_PASS,
        from: process.env.EMAIL_FROM || '–°–∏—Å—Ç–µ–º–∞ –ù–ö <noreply@company.ru>'
    },
    webPush: {
        enabled: process.env.PUSH_ENABLED === 'true',
        subject: process.env.VAPID_SUBJECT || 'mailto:admin@company.ru',
        publicKey: process.env.VAPID_PUBLIC_KEY,
        privateKey: process.env.VAPID_PRIVATE_KEY
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∏–∑ —Ñ–∞–π–ª–∞
function executeSqlFile(filename) {
    return new Promise((resolve, reject) => {
        const sql = fs.readFileSync(filename, 'utf8');
        
        // –†–∞–∑–¥–µ–ª—è–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        const commands = sql.split(';').filter(cmd => cmd.trim());
        
        db.serialize(() => {
            db.run('BEGIN TRANSACTION');
            
            let completed = 0;
            commands.forEach((command, index) => {
                if (command.trim()) {
                    db.run(command, (err) => {
                        if (err) {
                            console.error(`–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${index}:`, err);
                            db.run('ROLLBACK');
                            reject(err);
                            return;
                        }
                        
                        completed++;
                        if (completed === commands.length) {
                            db.run('COMMIT', (err) => {
                                if (err) reject(err);
                                else resolve();
                            });
                        }
                    });
                }
            });
        });
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
async function initializeDatabase() {
    const dbExists = fs.existsSync('./ndt_requests_v2.db');
    
    if (!dbExists) {
        console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ö–µ–º—É
        const schema = fs.readFileSync('./schema.sql', 'utf8');
        const statements = parseSqlStatements(schema);
        
        for (const statement of statements) {
            if (statement.trim()) {
                await new Promise((resolve, reject) => {
                    db.run(statement, (err) => {
                        if (err) reject(err);
                        else resolve();
                    });
                });
            }
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if (fs.existsSync('./notifications-schema.sql')) {
            console.log('üìß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
            const notifSchema = fs.readFileSync('./notifications-schema.sql', 'utf8');
            const notifStatements = parseSqlStatements(notifSchema);
            
            for (const statement of notifStatements) {
                if (statement.trim()) {
                    await new Promise((resolve, reject) => {
                        db.run(statement, (err) => {
                            if (err && !err.message.includes('already exists')) {
                                console.warn('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:', err.message);
                            }
                            resolve();
                        });
                    });
                }
            }
        }
        
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    } else {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è
        db.get("SELECT name FROM sqlite_master WHERE type='table' AND name='requests_v2'", (err, row) => {
            if (!row) {
                console.log('üîÑ –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
                migrateDatabase();
            } else {
                console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω–∞');
            }
        });
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª—É–∂–±—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ë–î
    notificationService = new NotificationService(db, notificationConfig);
    console.log('üîî –°–ª—É–∂–±–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
}

function parseSqlStatements(sql) {
    const statements = [];
    let current = '';
    let inTrigger = false;
    let triggerDepth = 0;
    
    const lines = sql.split('\n');
    
    for (const line of lines) {
        const trimmedLine = line.trim();
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if (trimmedLine.startsWith('--') || trimmedLine === '') {
            continue;
        }
        
        current += line + '\n';
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        if (trimmedLine.toUpperCase().includes('CREATE TRIGGER')) {
            inTrigger = true;
            triggerDepth = 0;
        }
        
        // –°—á–∏—Ç–∞–µ–º –≥–ª—É–±–∏–Ω—É –≤ —Ç—Ä–∏–≥–≥–µ—Ä–µ
        if (inTrigger) {
            if (trimmedLine.toUpperCase().includes('BEGIN')) {
                triggerDepth++;
            }
            if (trimmedLine.toUpperCase().includes('END')) {
                triggerDepth--;
                
                // –ï—Å–ª–∏ –º—ã –≤—ã—à–ª–∏ –∏–∑ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ BEGIN/END –∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ ; –ø–æ—Å–ª–µ END
                if (triggerDepth <= 0 && trimmedLine.endsWith(';')) {
                    inTrigger = false;
                    statements.push(current.trim());
                    current = '';
                    continue;
                }
            }
        }
        
        // –û–±—ã—á–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π (–Ω–µ –≤ —Ç—Ä–∏–≥–≥–µ—Ä–µ)
        if (!inTrigger && trimmedLine.endsWith(';')) {
            statements.push(current.trim());
            current = '';
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –ø—É—Å—Ç–∞—è
    if (current.trim()) {
        statements.push(current.trim());
    }
    
    return statements;
}

// –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –Ω–æ–≤—É—é
function migrateDatabase() {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');
    
    db.serialize(() => {
        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        const schema = fs.readFileSync('./schema.sql', 'utf8');
        const statements = parseSqlStatements(schema);
        
        statements.forEach(statement => {
            if (statement.trim()) {
                db.run(statement, (err) => {
                    if (err && !err.message.includes('already exists')) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', err);
                    }
                });
            }
        });
        
        // –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã requests –≤ –Ω–æ–≤—É—é requests_v2
        db.get("SELECT name FROM sqlite_master WHERE type='table' AND name='requests'", (err, row) => {
            if (row) {
                console.log('üìã –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã...');
                
                db.run(`
                    INSERT INTO requests_v2 (
                        date, order_number, drawing, certificate, material, 
                        quantity, operation, tech_requirements, notes, 
                        protocol_number, created_at, updated_at, created_by, updated_by
                    )
                    SELECT 
                        date, order_number, drawing, certificate, material,
                        quantity, operation, tech_requirements, notes,
                        protocol, created_at, updated_at, updated_by, updated_by
                    FROM requests
                `, (err) => {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
                    } else {
                        console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
                        
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏
                        updateMigratedData();
                    }
                });
            }
        });
    });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏
function updateMigratedData() {
    db.serialize(() => {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–Ω—Ü–∏–∏
        db.run(`
            UPDATE requests_v2 
            SET station_id = (SELECT id FROM stations WHERE name = 
                (SELECT station FROM requests WHERE requests.id = requests_v2.id))
        `);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø—ã –∫–æ–Ω—Ç—Ä–æ–ª—è
        db.run(`
            UPDATE requests_v2 
            SET control_type_id = (SELECT id FROM control_types WHERE code = 
                (SELECT control_type FROM requests WHERE requests.id = requests_v2.id))
        `);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
        db.run(`
            UPDATE requests_v2 
            SET executor_id = (SELECT id FROM executors WHERE short_name = 
                (SELECT executor FROM requests WHERE requests.id = requests_v2.id))
        `);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
        db.run(`
            UPDATE requests_v2 
            SET status_id = CASE 
                WHEN (SELECT status FROM requests WHERE requests.id = requests_v2.id) = 'new' THEN 2
                WHEN (SELECT status FROM requests WHERE requests.id = requests_v2.id) = 'in-progress' THEN 3
                WHEN (SELECT status FROM requests WHERE requests.id = requests_v2.id) = 'completed' THEN 7
                WHEN (SELECT status FROM requests WHERE requests.id = requests_v2.id) = 'correction' THEN 5
                ELSE 2
            END
        `);
    });
}

// API endpoints

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
app.get('/api/dictionaries', (req, res) => {
    const result = {};
    
    db.serialize(() => {
        // –°—Ç–∞—Ç—É—Å—ã
        db.all('SELECT * FROM statuses WHERE is_active = 1 ORDER BY sort_order', (err, rows) => {
            result.statuses = rows;
            
            // –¢–∏–ø—ã –∫–æ–Ω—Ç—Ä–æ–ª—è
            db.all('SELECT * FROM control_types WHERE is_active = 1 ORDER BY code', (err, rows) => {
                result.controlTypes = rows;
                
                // –°—Ç–∞–Ω—Ü–∏–∏
                db.all('SELECT * FROM stations WHERE is_active = 1 ORDER BY name', (err, rows) => {
                    result.stations = rows;
                    
                    // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏
                    db.all('SELECT * FROM executors WHERE is_active = 1 ORDER BY full_name', (err, rows) => {
                        result.executors = rows;
                        
                        // –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                        db.all('SELECT * FROM organizations WHERE is_active = 1 ORDER BY name', (err, rows) => {
                            result.organizations = rows;
                            res.json(result);
                        });
                    });
                });
            });
        });
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ —Å JOIN
app.get('/api/requests', (req, res) => {
    const { status_id, control_type_id, station_id, executor_id, priority } = req.query;
    
    let query = `
        SELECT 
            r.*,
            s.name as status_name,
            s.color as status_color,
            s.icon as status_icon,
            st.name as station_name,
            ct.name as control_type_name,
            ct.full_name as control_type_full,
            e.full_name as executor_name,
            o.name as organization_name,
            (SELECT COUNT(*) FROM documents WHERE request_id = r.id) as documents_count,
            (SELECT COUNT(*) FROM comments WHERE request_id = r.id) as comments_count
        FROM requests_v2 r
        LEFT JOIN statuses s ON r.status_id = s.id
        LEFT JOIN stations st ON r.station_id = st.id
        LEFT JOIN control_types ct ON r.control_type_id = ct.id
        LEFT JOIN executors e ON r.executor_id = e.id
        LEFT JOIN organizations o ON r.organization_id = o.id
        WHERE 1=1
    `;
    
    const params = [];
    
    if (status_id) {
        query += ' AND r.status_id = ?';
        params.push(status_id);
    }
    if (control_type_id) {
        query += ' AND r.control_type_id = ?';
        params.push(control_type_id);
    }
    if (station_id) {
        query += ' AND r.station_id = ?';
        params.push(station_id);
    }
    if (executor_id) {
        query += ' AND r.executor_id = ?';
        params.push(executor_id);
    }
    if (priority) {
        query += ' AND r.priority = ?';
        params.push(priority);
    }
    
    query += ' ORDER BY r.id DESC';
    
    db.all(query, params, (err, rows) => {
        if (err) {
            res.status(500).json({ error: err.message });
            return;
        }
        res.json(rows);
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
app.get('/api/requests/:id', (req, res) => {
    const { id } = req.params;
    
    const result = {};
    
    // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    db.get(`
        SELECT 
            r.*,
            s.name as status_name,
            s.color as status_color,
            s.icon as status_icon,
            s.allowed_transitions,
            st.name as station_name,
            ct.name as control_type_name,
            e.full_name as executor_name,
            o.name as organization_name
        FROM requests_v2 r
        LEFT JOIN statuses s ON r.status_id = s.id
        LEFT JOIN stations st ON r.station_id = st.id
        LEFT JOIN control_types ct ON r.control_type_id = ct.id
        LEFT JOIN executors e ON r.executor_id = e.id
        LEFT JOIN organizations o ON r.organization_id = o.id
        WHERE r.id = ?
    `, [id], (err, row) => {
        if (err) {
            res.status(500).json({ error: err.message });
            return;
        }
        if (!row) {
            res.status(404).json({ error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            return;
        }
        
        result.request = row;
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        db.all('SELECT * FROM documents WHERE request_id = ? ORDER BY uploaded_at DESC', [id], (err, docs) => {
            result.documents = docs || [];
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            db.all('SELECT * FROM comments WHERE request_id = ? ORDER BY created_at DESC', [id], (err, comments) => {
                result.comments = comments || [];
                
                // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                db.all('SELECT * FROM history_v2 WHERE request_id = ? ORDER BY timestamp DESC LIMIT 50', [id], (err, history) => {
                    result.history = history || [];
                    
                    res.json(result);
                });
            });
        });
    });
});

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
app.post('/api/requests', async (req, res) => {
    const data = req.body;
    
    const query = `
        INSERT INTO requests_v2 (
            date, order_number, drawing, certificate, material,
            quantity, operation, station_id, control_type_id, 
            executor_id, organization_id, status_id, tech_requirements,
            surface_preparation, english_required, notes, priority,
            deadline, created_by, updated_by
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `;
    
    const params = [
        data.date, data.order_number, data.drawing, data.certificate,
        data.material, data.quantity, data.operation, data.station_id,
        data.control_type_id, data.executor_id, data.organization_id,
        data.status_id || 2, data.tech_requirements, data.surface_preparation,
        data.english_required || 0, data.notes, data.priority || 2,
        data.deadline, data.user || '–°–∏—Å—Ç–µ–º–∞', data.user || '–°–∏—Å—Ç–µ–º–∞'
    ];
    
    db.run(query, params, async function(err) {
        if (err) {
            res.status(500).json({ error: err.message });
            return;
        }
        
        const requestId = this.lastID;
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        db.run(`
            INSERT INTO history_v2 (request_id, action_type, user, comment)
            VALUES (?, 'CREATE', ?, '–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞')
        `, [requestId, data.user || '–°–∏—Å—Ç–µ–º–∞']);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
        if (notificationService) {
            try {
                await notificationService.notifyNewRequest(requestId);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            }
        }
        
        res.json({ id: requestId, message: '–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ' });
    });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
app.put('/api/requests/:id', async (req, res) => {
    const { id } = req.params;
    const data = req.body;
    const user = data.user || '–°–∏—Å—Ç–µ–º–∞';
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    db.get('SELECT * FROM requests_v2 WHERE id = ?', [id], async (err, oldData) => {
        if (err || !oldData) {
            res.status(404).json({ error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        const updateFields = [];
        const params = [];
        const changes = [];
        
        // –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const fields = [
            'date', 'order_number', 'drawing', 'certificate', 'material',
            'quantity', 'operation', 'station_id', 'control_type_id',
            'executor_id', 'organization_id', 'status_id', 'tech_requirements',
            'surface_preparation', 'english_required', 'notes', 'priority',
            'deadline', 'control_date', 'protocol_number', 'protocol_date',
            'defects_found', 'route_card_mark', 'production_mark',
            'correction_letter_number', 'corrected_protocol_number',
            'correction_completed'
        ];
        
        fields.forEach(field => {
            if (data[field] !== undefined) {
                updateFields.push(`${field} = ?`);
                params.push(data[field]);
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
                if (oldData[field] !== data[field]) {
                    changes.push({
                        field: field,
                        old_value: oldData[field],
                        new_value: data[field]
                    });
                }
            }
        });
        
        if (updateFields.length === 0) {
            res.json({ message: '–ù–µ—á–µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å' });
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º updated_by
        updateFields.push('updated_by = ?');
        params.push(user);
        
        params.push(id);
        
        const query = `UPDATE requests_v2 SET ${updateFields.join(', ')} WHERE id = ?`;
        
        db.run(query, params, async (err) => {
            if (err) {
                res.status(500).json({ error: err.message });
                return;
            }
            
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            changes.forEach(change => {
                db.run(`
                    INSERT INTO history_v2 (request_id, action_type, field_name, 
                                          old_value, new_value, user)
                    VALUES (?, 'UPDATE', ?, ?, ?, ?)
                `, [id, change.field, change.old_value, change.new_value, user]);
            });
            
            // –û—Å–æ–±–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            if (data.status_id && oldData.status_id !== data.status_id) {
                db.run(`
                    INSERT INTO history_v2 (request_id, action_type, comment, user)
                    VALUES (?, 'STATUS_CHANGE', ?, ?)
                `, [id, `–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω —Å ${oldData.status_id} –Ω–∞ ${data.status_id}`, user]);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
                if (notificationService) {
                    try {
                        await notificationService.notifyStatusChange(
                            id, 
                            oldData.status_id, 
                            data.status_id, 
                            user
                        );
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
                    }
                }
            }
            
            res.json({ message: '–ó–∞—è–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ' });
        });
    });
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
app.post('/api/requests/:id/comments', (req, res) => {
    const { id } = req.params;
    const { comment_text, user, is_internal } = req.body;
    
    db.run(`
        INSERT INTO comments (request_id, comment_text, created_by, is_internal)
        VALUES (?, ?, ?, ?)
    `, [id, comment_text, user || '–°–∏—Å—Ç–µ–º–∞', is_internal || 0], function(err) {
        if (err) {
            res.status(500).json({ error: err.message });
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        db.run(`
            INSERT INTO history_v2 (request_id, action_type, comment, user)
            VALUES (?, 'COMMENT', ?, ?)
        `, [id, '–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', user || '–°–∏—Å—Ç–µ–º–∞']);
        
        res.json({ id: this.lastID, message: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω' });
    });
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
app.post('/api/requests/:id/documents', upload.single('file'), (req, res) => {
    const { id } = req.params;
    const { user } = req.body;
    const file = req.file;
    
    if (!file) {
        res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
        return;
    }
    
    db.run(`
        INSERT INTO documents (request_id, filename, original_name, 
                             file_type, file_size, file_path, uploaded_by)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    `, [
        id, file.filename, file.originalname, 
        file.mimetype, file.size, file.path, user || '–°–∏—Å—Ç–µ–º–∞'
    ], function(err) {
        if (err) {
            res.status(500).json({ error: err.message });
            return;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        db.run(`
            INSERT INTO history_v2 (request_id, action_type, comment, user)
            VALUES (?, 'FILE_UPLOAD', ?, ?)
        `, [id, `–ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${file.originalname}`, user || '–°–∏—Å—Ç–µ–º–∞']);
        
        res.json({ 
            id: this.lastID, 
            message: '–î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω',
            filename: file.filename 
        });
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.get('/api/stats', (req, res) => {
    const stats = {};
    
    db.serialize(() => {
        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        db.get(`
            SELECT 
                COUNT(*) as total,
                SUM(CASE WHEN s.code IN ('new', 'in_progress', 'testing') THEN 1 ELSE 0 END) as active,
                SUM(CASE WHEN s.code = 'completed' AND r.created_at >= date('now', '-30 days') THEN 1 ELSE 0 END) as completed_month,
                SUM(CASE WHEN s.code = 'correction_required' THEN 1 ELSE 0 END) as corrections,
                SUM(CASE WHEN r.deadline < date('now') AND s.code NOT IN ('completed', 'cancelled', 'archived') THEN 1 ELSE 0 END) as overdue
            FROM requests_v2 r
            JOIN statuses s ON r.status_id = s.id
            WHERE s.code != 'archived'
        `, (err, row) => {
            Object.assign(stats, row || {});
            
            // –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º
            db.all(`
                SELECT s.name, s.color, s.icon, COUNT(r.id) as count
                FROM statuses s
                LEFT JOIN requests_v2 r ON r.status_id = s.id
                WHERE s.is_active = 1
                GROUP BY s.id
                ORDER BY s.sort_order
            `, (err, rows) => {
                stats.byStatus = rows || [];
                
                // –ü–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç—Ä–æ–ª—è
                db.all(`
                    SELECT ct.name, ct.code, COUNT(r.id) as count
                    FROM control_types ct
                    LEFT JOIN requests_v2 r ON r.control_type_id = ct.id
                    WHERE ct.is_active = 1
                    GROUP BY ct.id
                    ORDER BY ct.code
                `, (err, rows) => {
                    stats.byControlType = rows || [];
                    
                    // –ü–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º
                    db.all(`
                        SELECT e.full_name, e.short_name, COUNT(r.id) as count,
                               SUM(CASE WHEN s.code = 'completed' THEN 1 ELSE 0 END) as completed
                        FROM executors e
                        LEFT JOIN requests_v2 r ON r.executor_id = e.id
                        LEFT JOIN statuses s ON r.status_id = s.id
                        WHERE e.is_active = 1
                        GROUP BY e.id
                        ORDER BY count DESC
                    `, (err, rows) => {
                        stats.byExecutor = rows || [];
                        
                        // –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
                        db.all(`
                            SELECT 
                                CASE priority 
                                    WHEN 1 THEN '–í—ã—Å–æ–∫–∏–π'
                                    WHEN 2 THEN '–°—Ä–µ–¥–Ω–∏–π'
                                    WHEN 3 THEN '–ù–∏–∑–∫–∏–π'
                                END as priority_name,
                                priority,
                                COUNT(*) as count
                            FROM requests_v2 r
                            JOIN statuses s ON r.status_id = s.id
                            WHERE s.code != 'archived'
                            GROUP BY priority
                            ORDER BY priority
                        `, (err, rows) => {
                            stats.byPriority = rows || [];
                            res.json(stats);
                        });
                    });
                });
            });
        });
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
app.get('/api/requests/:id/allowed-transitions', (req, res) => {
    const { id } = req.params;
    
    db.get(`
        SELECT s.allowed_transitions 
        FROM requests_v2 r
        JOIN statuses s ON r.status_id = s.id
        WHERE r.id = ?
    `, [id], (err, row) => {
        if (err || !row) {
            res.status(404).json({ error: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
            return;
        }
        
        const allowedCodes = JSON.parse(row.allowed_transitions || '[]');
        
        db.all(`
            SELECT id, code, name, color, icon 
            FROM statuses 
            WHERE code IN (${allowedCodes.map(() => '?').join(',')})
            ORDER BY sort_order
        `, allowedCodes, (err, rows) => {
            res.json(rows || []);
        });
    });
});

// –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
app.post('/api/templates', (req, res) => {
    const data = req.body;
    
    db.run(`
        INSERT INTO request_templates (
            template_name, order_number, drawing, material,
            station_id, control_type_id, tech_requirements, 
            notes, created_by
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    `, [
        data.template_name, data.order_number, data.drawing,
        data.material, data.station_id, data.control_type_id,
        data.tech_requirements, data.notes, data.user || '–°–∏—Å—Ç–µ–º–∞'
    ], function(err) {
        if (err) {
            res.status(500).json({ error: err.message });
            return;
        }
        res.json({ id: this.lastID, message: '–®–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω' });
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
app.get('/api/templates', (req, res) => {
    db.all(`
        SELECT t.*, s.name as station_name, ct.name as control_type_name
        FROM request_templates t
        LEFT JOIN stations s ON t.station_id = s.id
        LEFT JOIN control_types ct ON t.control_type_id = ct.id
        ORDER BY t.template_name
    `, (err, rows) => {
        if (err) {
            res.status(500).json({ error: err.message });
            return;
        }
        res.json(rows);
    });
});

// –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
if (notificationService) {
    const notificationRoutes = require('./notification-routes')(db, notificationService);
    app.use('/api/notifications', notificationRoutes);
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
app.get('/api/export', (req, res) => {
    db.all(`
        SELECT 
            r.id,
            r.request_number,
            r.date,
            r.order_number,
            r.drawing,
            ct.name as control_type,
            st.name as station,
            e.full_name as executor,
            s.name as status,
            r.priority,
            r.deadline
        FROM requests_v2 r
        LEFT JOIN statuses s ON r.status_id = s.id
        LEFT JOIN control_types ct ON r.control_type_id = ct.id
        LEFT JOIN stations st ON r.station_id = st.id
        LEFT JOIN executors e ON r.executor_id = e.id
        WHERE s.code != 'archived' 
        ORDER BY r.id DESC
    `, (err, rows) => {
        if (err) {
            res.status(500).json({ error: err.message });
            return;
        }

        let csv = '\ufeff'; // BOM –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        csv += 'ID,–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏,–î–∞—Ç–∞,–ó–∞–∫–∞–∑,–ß–µ—Ä—Ç–µ–∂/–î–µ—Ç–∞–ª—å,–¢–∏–ø –∫–æ–Ω—Ç—Ä–æ–ª—è,–°—Ç–∞–Ω—Ü–∏—è –ê–≠–°,–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å,–°—Ç–∞—Ç—É—Å,–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç,–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n';

        rows.forEach(row => {
            const priorityText = row.priority === 1 ? '–í—ã—Å–æ–∫–∏–π' : row.priority === 2 ? '–°—Ä–µ–¥–Ω–∏–π' : '–ù–∏–∑–∫–∏–π';
            csv += `${row.id},"${row.request_number || ''}","${row.date}","${row.order_number}","${row.drawing}",`;
            csv += `"${row.control_type}","${row.station}","${row.executor}","${row.status}","${priorityText}",`;
            csv += `"${row.deadline || ''}"\n`;
        });

        res.setHeader('Content-Type', 'text/csv; charset=utf-8');
        res.setHeader('Content-Disposition', `attachment; filename=requests_${new Date().toISOString().split('T')[0]}.csv`);
        res.send(csv);
    });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
initializeDatabase().then(() => {
    app.listen(PORT, '0.0.0.0', () => {
        console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!                            ‚ïë
‚ïë                                                        ‚ïë
‚ïë  üìç –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø: http://localhost:${PORT}           ‚ïë
‚ïë  üåê –°–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø:   http://–í–ê–®_IP:${PORT}              ‚ïë
‚ïë                                                        ‚ïë
‚ïë  üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${notificationConfig.email.enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}               ‚ïë
‚ïë  üì± Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:  ${notificationConfig.webPush.enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'}               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        `);
    });
}).catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', err);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
process.on('SIGINT', () => {
    console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
    db.close((err) => {
        if (err) console.error(err.message);
        console.log('üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞.');
        process.exit(0);
    });
});